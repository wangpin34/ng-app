import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as uuidv1 from 'uuid/v1';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { Action } from '@ngrx/store';
import { Observable, of } from 'rxjs';
import { catchError, map, mergeMap, tap } from 'rxjs/operators';

import { User } from '../reducers/user.model';
import { UserActionTypes, 
         GetUsers, 
         GetUsersOK,
         GetUsersFailed,
         GetUser,
         GetUserOK,
         GetUserFailed,
         AddUser,
         AddUserOK,
         AddUserFailed,
         RemoveUser,
         RemoveUserOK,
         RemoveUserFailed } from '../actions/user.action';

const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};

@Injectable({
  providedIn: 'root'
})
export class UserEffects {
  private UsersUrl = 'api/users';  // URL to web api

  constructor(private http: HttpClient, private actions$: Actions) { }

  @Effect()
  getUsers$: Observable<Action> = this.actions$.pipe(
    ofType<GetUsers>(UserActionTypes.GetUsers),
    mergeMap(action =>
      this.http.get(this.UsersUrl).pipe(
        // If successful, dispatch success action with result
        map((users: User[]) => (new GetUsersOK(users))),
        // If request fails, dispatch failed action
        catchError(() => of(new GetUsersFailed()))
      )
    )
  );

  @Effect()
  getUser$: Observable<Action> = this.actions$.pipe(
    ofType<GetUser>(UserActionTypes.GetUser),
    mergeMap(action =>
      this.http.get(`${this.UsersUrl}/${action.payload}`).pipe(
        // If successful, dispatch success action with result
        map((user: User) => (new GetUserOK(user))),
        // If request fails, dispatch failed action
        catchError(() => of(new GetUserFailed()))
      )
    )
  );

  @Effect()
  addUser$: Observable<Action> = this.actions$.pipe(
    ofType<AddUser>(UserActionTypes.AddUser),
    mergeMap(action =>
      this.http.post(this.UsersUrl, action.payload).pipe(
        // If successful, dispatch success action with result
        map(
          (user: User) => {
            // Mock: In real development with backend service, the id is truly generated by backend service
            if (!user.id) {
              user.id = uuidv1();
            }
            return (new AddUserOK(user));
          },
          // If request fails, dispatch failed action
          catchError(() => of(new AddUserFailed(action.payload)))
        )
      )
    )
  );

  @Effect()
  removeUser$: Observable<Action> = this.actions$.pipe(
    ofType<RemoveUser>(UserActionTypes.RemoveUser),
    mergeMap(action =>
      this.http.delete(`${this.UsersUrl}/${action.payload.id}`).pipe(
        // If successful, dispatch success action with result
        map(data => (new RemoveUserOK())),
        // If request fails, dispatch failed action
        catchError(() => of(new RemoveUserFailed(action.payload)))
      )
    )
  );
  

  // /** GET users from the server */
  // getUsers (): Observable<User[]> {
  //   return this.http.get<User[]>(this.UsersUrl)
  //     .pipe(
  //       tap(users => this.log('fetched users')),
  //       catchError(this.handleError('getUsers', []))
  //     );
  // }

  // /** GET user from the server */
  // getUser (id: string): Observable<User> {
  //   const url = `${this.UsersUrl}/${id}`;
  //   return this.http.get<User>(url).pipe(
  //       tap(user => this.log('fetched user')),
  //       catchError(this.handleError<User>(`getUser id=${id}`))
  //     );
  // }

  // addUser (user: User): Observable<User> {
  //   user.id = uuidv1();
  //   return this.http.post(this.UsersUrl, user, httpOptions).pipe(
  //     tap((user: User) => this.log(`created user id=${user.id}`)),
  //     catchError(this.handleError<any>('createdUser'))
  //   )
  // }

  // updateUser (user: User): Observable<any> {
  //   return this.http.put(this.UsersUrl, user, httpOptions).pipe(
  //     tap(_ => this.log(`updated user id=${user.id}`)),
  //     catchError(this.handleError<any>('updateUser'))
  //   ); 
  // }

  // deleteUser (user: User): Observable<any> {
  //   const url = `${this.UsersUrl}/${user.id}`;
  //   return this.http.delete(url, httpOptions).pipe(
  //     tap(_ => this.log(`deleted user id=${user.id}`)),
  //     catchError(this.handleError<any>('deleteUser'))
  //   ); 
  // }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T> (operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  /** Log a HeroService message with the MessageService */
  private log(message: string) {
    console.log(`UserService: ${message}`);
  }
}
